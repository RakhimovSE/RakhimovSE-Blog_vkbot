import vkapi
import os
import importlib
from command_system import command_list
import apiai, json


def load_modules():
    # –ø—É—Ç—å –æ—Ç —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    files = os.listdir(vkapi.BOT_DIR + '/commands')
    modules = filter(lambda x: x.endswith('.py'), files)
    for m in modules:
        importlib.import_module("commands." + m[0:-3])


def get_answer(data):
    body = data['body'].lower()
    message = ''
    attachment = ''
    distance = len(body)
    command = None
    key = ''
    for c in command_list:
        for k in c.keys:
            d = damerau_levenshtein_distance(body, k)
            if d < distance:
                distance = d
                command = c
                key = k
                if distance == 0:
                    message, attachment = c.process(data)
                    return message, attachment
    if float(distance) < len(body) * 0.4:
        message, attachment = command.process(data)
        message = '–Ø –ø–æ–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ "%s"\n\n' % key + message
    return message, attachment


def get_dialogflow_text_message(data):
    body = data['body'].lower()
    request = apiai.ApiAI('a36518ee37714bcb8a98ebac6bfa6ad6').text_request()  # –¢–æ–∫–µ–Ω API –∫ Dialogflow
    request.lang = 'ru'  # –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–∞–Ω –∑–∞–ø—Ä–æ—Å
    request.session_id = 'BatlabAIBot'  # ID –°–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞ (–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É—á–∏—Ç—å –±–æ—Ç–∞)
    request.query = body  # –ü–æ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç —é–∑–µ—Ä–∞
    responseJson = json.loads(request.getresponse().read().decode('utf-8'))
    response = responseJson['result']['fulfillment']['speech']  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ - –ø—Ä–∏—Å—ã–ª–∞–µ–º —é–∑–µ—Ä—É, –µ—Å–ª–∏ –Ω–µ—Ç - –±–æ—Ç –µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª
    return response if response else '–Ø —Ç–µ–±—è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª! –ù–∞–ø–∏—à–∏ "–ø–æ–º–æ—â—å", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã. ' \
                                     '–õ–∏–±–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è üòä'


def create_answer(data):
    load_modules()
    user_id = data['user_id']
    message, attachment = get_answer(data)
    if not message:
        message = get_dialogflow_text_message(data)
    vkapi.send_message(user_id, message, attachment)


def damerau_levenshtein_distance(s1, s2):
    d = {}
    lenstr1 = len(s1)
    lenstr2 = len(s2)
    for i in range(-1, lenstr1 + 1):
        d[(i, -1)] = i + 1
    for j in range(-1, lenstr2 + 1):
        d[(-1, j)] = j + 1
    for i in range(lenstr1):
        for j in range(lenstr2):
            if s1[i] == s2[j]:
                cost = 0
            else:
                cost = 1
            d[(i, j)] = min(
                d[(i - 1, j)] + 1,  # deletion
                d[(i, j - 1)] + 1,  # insertion
                d[(i - 1, j - 1)] + cost,  # substitution
            )
            if i and j and s1[i] == s2[j - 1] and s1[i - 1] == s2[j]:
                d[(i, j)] = min(d[(i, j)], d[i - 2, j - 2] + cost)  # transposition
    return d[lenstr1 - 1, lenstr2 - 1]
